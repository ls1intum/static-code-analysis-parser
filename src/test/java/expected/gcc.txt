{"tool":"GCC","issues":[{"filePath":"buddy.c","startLine":78,"endLine":78,"startColumn":23,"endColumn":23,"rule":"[-Wformat=]","category":"Misc","message":"buddy.c: In function ‘print_BL’:[-Wformat=]\nProblem: format ‘%p’ expects argument of type ‘void *’, but argument 2 has type ‘struct blockList *’ \n78 |     printf(\"\\titer = %p, next = %p, block = %p\\n\", blockList, blockList->next,\n|                      ~^                            ~~~~~~~~~\n|                       |                            |\n|                       void *                       struct blockList *","priority":"warning"},{"filePath":"buddy.c","startLine":78,"endLine":78,"startColumn":34,"endColumn":34,"rule":"[-Wformat=]","category":"Misc","message":"buddy.c: In function ‘print_BL’:[-Wformat=]\nProblem: format ‘%p’ expects argument of type ‘void *’, but argument 3 has type ‘struct blockList *’ \n78 |     printf(\"\\titer = %p, next = %p, block = %p\\n\", blockList, blockList->next,\n|                                 ~^                            ~~~~~~~~~~~~~~~\n|                                  |                                     |\n|                                  void *                                struct blockList *","priority":"warning"},{"filePath":"buddy.c","startLine":78,"endLine":78,"startColumn":46,"endColumn":46,"rule":"[-Wformat=]","category":"Misc","message":"buddy.c: In function ‘print_BL’:[-Wformat=]\nProblem: format ‘%p’ expects argument of type ‘void *’, but argument 4 has type ‘struct block *’ \n78 |     printf(\"\\titer = %p, next = %p, block = %p\\n\", blockList, blockList->next,\n|                                             ~^\n|                                              |\n|                                              void *\n79 |            blockList->block);\n|            ~~~~~~~~~~~~~~~~\n|                     |\n|                     struct block *","priority":"warning"},{"filePath":"buddy.c","startLine":105,"endLine":105,"startColumn":36,"endColumn":36,"rule":"[-Wunused-parameter]","category":"Misc","message":"buddy.c: In function ‘free_FL’:[-Wunused-parameter]\nProblem: unused parameter ‘freeList’ \n105 | void free_FL(struct freeBlockList *freeList) {}\n|              ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~","priority":"warning"},{"filePath":"buddy.c","startLine":216,"endLine":216,"startColumn":21,"endColumn":21,"rule":"[-Wformat=]","category":"Misc","message":"buddy.c: In function ‘print_FL’:[-Wformat=]\nProblem: format ‘%p’ expects argument of type ‘void *’, but argument 2 has type ‘struct freeBlockListE *’ \n216 |     printf(\"iter = %p, next = %p, list = %p\\n\", iter, iter->next, iter->list);\n|                    ~^                           ~~~~\n|                     |                           |\n|                     void *                      struct freeBlockListE *","priority":"warning"},{"filePath":"buddy.c","startLine":216,"endLine":216,"startColumn":32,"endColumn":32,"rule":"[-Wformat=]","category":"Misc","message":"buddy.c: In function ‘print_FL’:[-Wformat=]\nProblem: format ‘%p’ expects argument of type ‘void *’, but argument 3 has type ‘struct freeBlockListE *’ \n216 |     printf(\"iter = %p, next = %p, list = %p\\n\", iter, iter->next, iter->list);\n|                               ~^                      ~~~~~~~~~~\n|                                |                          |\n|                                void *                     struct freeBlockListE *","priority":"warning"},{"filePath":"buddy.c","startLine":216,"endLine":216,"startColumn":43,"endColumn":43,"rule":"[-Wformat=]","category":"Misc","message":"buddy.c: In function ‘print_FL’:[-Wformat=]\nProblem: format ‘%p’ expects argument of type ‘void *’, but argument 4 has type ‘struct blockList *’ \n216 |     printf(\"iter = %p, next = %p, list = %p\\n\", iter, iter->next, iter->list);\n|                                          ~^                       ~~~~~~~~~~\n|                                           |                           |\n|                                           void *                      struct blockList *","priority":"warning"},{"filePath":"buddy.c","startLine":234,"endLine":234,"startColumn":36,"endColumn":36,"rule":"[-Wunused-parameter]","category":"Misc","message":"buddy.c: In function ‘free_UL’:[-Wunused-parameter]\nProblem: unused parameter ‘usedList’ \n234 | void free_UL(struct usedBlockList *usedList) {}\n|              ~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~","priority":"warning"},{"filePath":"buddy.c","startLine":46,"endLine":46,"startColumn":11,"endColumn":11,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘splitBlock’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘b’ [CWE-690] \n46 |   b->addr = a->addr + a->size;\n|   ~~~~~~~~^~~~~~~~~~~~~~~~~~~\n‘main’: events 1-10\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (2) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |             ~~~~~~~~~~~~~~~~~~\n|      |             |\n|      |             (3) ...to here\n|  378 |     if (n != 1) {\n|      |        ~\n|      |        |\n|      |        (4) following ‘false’ branch (when ‘n == 1’)...\n|......\n|  383 |     switch (cmd) {\n|      |     ~~~~~~\n|      |     |\n|      |     (5) ...to here\n|      |     (6) following ‘case 109:’ branch...\n|......\n|  407 |     case 'm': {\n|      |     ~~~~\n|      |     |\n|      |     (7) ...to here\n|......\n|  410 |       if (n != 1 || num == 0) {\n|      |          ~\n|      |          |\n|      |          (8) following ‘false’ branch...\n|......\n|  415 |       if (allocate(freeList, usedList,\n|      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |           |\n|      |           (10) calling ‘allocate’ from ‘main’\n|  416 |                    (toP2(num, blockSize) + (blockSize / 2)) / blockSize, idx,\n|      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (9) ...to here\n|  417 |                    mem)) {\n|      |                    ~~~~\n|\n+--> ‘allocate’: events 11-12\n|\n|  288 | int allocate(struct freeBlockList *freeList, struct usedBlockList *usedList,\n|      |     ^~~~~~~~\n|      |     |\n|      |     (11) entry to ‘allocate’\n|  289 |              unsigned int size, unsigned int idx, char *mem) {\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (12) calling ‘extract_FL’ from ‘allocate’\n|\n+--> ‘extract_FL’: events 13-16\n|\n|  147 | struct block *extract_FL(struct freeBlockList *freeList, unsigned int size) {\n|      |               ^~~~~~~~~~\n|      |               |\n|      |               (13) entry to ‘extract_FL’\n|  148 |   if (freeList->head == NULL || freeList->head->list->block->size < size) {\n|      |      ~\n|      |      |\n|      |      (14) following ‘false’ branch...\n|......\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (15) ...to here\n|      |          (16) calling ‘gen_extract_FL’ from ‘extract_FL’\n|\n+--> ‘gen_extract_FL’: events 17-24\n|\n|  107 | struct block *gen_extract_FL(struct freeBlockListE **freeList,\n|      |               ^~~~~~~~~~~~~~\n|      |               |\n|      |               (17) entry to ‘gen_extract_FL’\n|......\n|  110 |   if (fl->list->block->size == size) {\n|      |      ~\n|      |      |\n|      |      (18) following ‘false’ branch...\n|......\n|  127 |   if (fl->next == NULL) {\n|      |      ~~~~~~~~~\n|      |      |  |\n|      |      |  (19) ...to here\n|      |      (20) following ‘true’ branch...\n|  128 |     if (fl->list->next == NULL) {\n|      |        ~~~~~~~~~\n|      |        |  |\n|      |        |  (21) ...to here\n|      |        (22) following ‘true’ branch...\n|  129 |       fl->list = splitBlock(fl->list);\n|      |                  ~~~~~~~~~~~~~~~~~~~~\n|      |                  |\n|      |                  (23) ...to here\n|      |                  (24) calling ‘splitBlock’ from ‘gen_extract_FL’\n|\n+--> ‘splitBlock’: events 25-27\n|\n|   39 | struct blockList *splitBlock(struct blockList *first) {\n|      |                   ^~~~~~~~~~\n|      |                   |\n|      |                   (25) entry to ‘splitBlock’\n|......\n|   43 |   struct block *b = (struct block *)malloc(sizeof(struct block));\n|      |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                                     |\n|      |                                     (26) this call could return NULL\n|......\n|   46 |   b->addr = a->addr + a->size;\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |           |\n|      |           (27) ‘b’ could be NULL: unchecked value from (26)\n|","priority":"warning"},{"filePath":"buddy.c","startLine":50,"endLine":50,"startColumn":17,"endColumn":17,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘splitBlock’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘second’ [CWE-690] \n50 |   second->block = b;\n|   ~~~~~~~~~~~~~~^~~\n‘main’: events 1-10\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (2) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |             ~~~~~~~~~~~~~~~~~~\n|      |             |\n|      |             (3) ...to here\n|  378 |     if (n != 1) {\n|      |        ~\n|      |        |\n|      |        (4) following ‘false’ branch (when ‘n == 1’)...\n|......\n|  383 |     switch (cmd) {\n|      |     ~~~~~~\n|      |     |\n|      |     (5) ...to here\n|      |     (6) following ‘case 109:’ branch...\n|......\n|  407 |     case 'm': {\n|      |     ~~~~\n|      |     |\n|      |     (7) ...to here\n|......\n|  410 |       if (n != 1 || num == 0) {\n|      |          ~\n|      |          |\n|      |          (8) following ‘false’ branch...\n|......\n|  415 |       if (allocate(freeList, usedList,\n|      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |           |\n|      |           (10) calling ‘allocate’ from ‘main’\n|  416 |                    (toP2(num, blockSize) + (blockSize / 2)) / blockSize, idx,\n|      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (9) ...to here\n|  417 |                    mem)) {\n|      |                    ~~~~\n|\n+--> ‘allocate’: events 11-12\n|\n|  288 | int allocate(struct freeBlockList *freeList, struct usedBlockList *usedList,\n|      |     ^~~~~~~~\n|      |     |\n|      |     (11) entry to ‘allocate’\n|  289 |              unsigned int size, unsigned int idx, char *mem) {\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (12) calling ‘extract_FL’ from ‘allocate’\n|\n+--> ‘extract_FL’: events 13-16\n|\n|  147 | struct block *extract_FL(struct freeBlockList *freeList, unsigned int size) {\n|      |               ^~~~~~~~~~\n|      |               |\n|      |               (13) entry to ‘extract_FL’\n|  148 |   if (freeList->head == NULL || freeList->head->list->block->size < size) {\n|      |      ~\n|      |      |\n|      |      (14) following ‘false’ branch...\n|......\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (15) ...to here\n|      |          (16) calling ‘gen_extract_FL’ from ‘extract_FL’\n|\n+--> ‘gen_extract_FL’: events 17-24\n|\n|  107 | struct block *gen_extract_FL(struct freeBlockListE **freeList,\n|      |               ^~~~~~~~~~~~~~\n|      |               |\n|      |               (17) entry to ‘gen_extract_FL’\n|......\n|  110 |   if (fl->list->block->size == size) {\n|      |      ~\n|      |      |\n|      |      (18) following ‘false’ branch...\n|......\n|  127 |   if (fl->next == NULL) {\n|      |      ~~~~~~~~~\n|      |      |  |\n|      |      |  (19) ...to here\n|      |      (20) following ‘true’ branch...\n|  128 |     if (fl->list->next == NULL) {\n|      |        ~~~~~~~~~\n|      |        |  |\n|      |        |  (21) ...to here\n|      |        (22) following ‘true’ branch...\n|  129 |       fl->list = splitBlock(fl->list);\n|      |                  ~~~~~~~~~~~~~~~~~~~~\n|      |                  |\n|      |                  (23) ...to here\n|      |                  (24) calling ‘splitBlock’ from ‘gen_extract_FL’\n|\n+--> ‘splitBlock’: events 25-27\n|\n|   39 | struct blockList *splitBlock(struct blockList *first) {\n|      |                   ^~~~~~~~~~\n|      |                   |\n|      |                   (25) entry to ‘splitBlock’\n|   40 |   struct blockList *second =\n|   41 |       (struct blockList *)malloc(sizeof(struct blockList));\n|      |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                           |\n|      |                           (26) this call could return NULL\n|......\n|   50 |   second->block = b;\n|      |   ~~~~~~~~~~~~~~~~~\n|      |                 |\n|      |                 (27) ‘second’ could be NULL: unchecked value from (26)\n|","priority":"warning"},{"filePath":"buddy.c","startLine":95,"endLine":95,"startColumn":18,"endColumn":18,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘init_FL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘freeList’ [CWE-690] \n95 |   freeList->head =\n|   ~~~~~~~~~~~~~~~^\n96 |       (struct freeBlockListE *)malloc(sizeof(struct freeBlockListE));\n|       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n‘main’: events 1-3\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  362 |       (struct freeBlockList *)malloc(sizeof(struct freeBlockList));\n|      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                               |\n|      |                               (2) this call could return NULL\n|  363 |   init_FL(freeList, numBlocks);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (3) calling ‘init_FL’ from ‘main’\n|\n+--> ‘init_FL’: events 4-5\n|\n|   94 | void init_FL(struct freeBlockList *freeList, unsigned int numBlocks) {\n|      |      ^~~~~~~\n|      |      |\n|      |      (4) entry to ‘init_FL’\n|   95 |   freeList->head =\n|      |   ~~~~~~~~~~~~~~~~\n|      |                  |\n|      |                  (5) ‘freeList’ could be NULL: unchecked value from (2)\n|   96 |       (struct freeBlockListE *)malloc(sizeof(struct freeBlockListE));\n|      |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|","priority":"warning"},{"filePath":"buddy.c","startLine":97,"endLine":97,"startColumn":24,"endColumn":24,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘init_FL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘*freeList.head’ [CWE-690] \n97 |   freeList->head->next = NULL;\n|                        ^\n‘main’: events 1-2\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  363 |   init_FL(freeList, numBlocks);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (2) calling ‘init_FL’ from ‘main’\n|\n+--> ‘init_FL’: events 3-4\n|\n|   94 | void init_FL(struct freeBlockList *freeList, unsigned int numBlocks) {\n|      |      ^~~~~~~\n|      |      |\n|      |      (3) entry to ‘init_FL’\n|   95 |   freeList->head =\n|   96 |       (struct freeBlockListE *)malloc(sizeof(struct freeBlockListE));\n|      |                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                                |\n|      |                                (4) this call could return NULL\n|\n‘init_FL’: event 5\n|\n|   97 |   freeList->head->next = NULL;\n|      |                        ^\n|      |                        |\n|      |                        (5) ‘*freeList.head’ could be NULL: unchecked value from (4)\n|","priority":"warning"},{"filePath":"buddy.c","startLine":99,"endLine":99,"startColumn":30,"endColumn":30,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘init_FL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘*freeList_18(D)->head.list’ [CWE-690] \n99 |   freeList->head->list->next = NULL;\n|                              ^\n‘main’: events 1-2\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  363 |   init_FL(freeList, numBlocks);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (2) calling ‘init_FL’ from ‘main’\n|\n+--> ‘init_FL’: events 3-4\n|\n|   94 | void init_FL(struct freeBlockList *freeList, unsigned int numBlocks) {\n|      |      ^~~~~~~\n|      |      |\n|      |      (3) entry to ‘init_FL’\n|......\n|   98 |   freeList->head->list = (struct blockList *)malloc(sizeof(struct blockList));\n|      |                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                                              |\n|      |                                              (4) this call could return NULL\n|\n‘init_FL’: event 5\n|\n|   99 |   freeList->head->list->next = NULL;\n|      |                              ^\n|      |                              |\n|      |                              (5) ‘*freeList_18(D)->head.list’ could be NULL: unchecked value from (4)\n|","priority":"warning"},{"filePath":"buddy.c","startLine":101,"endLine":101,"startColumn":37,"endColumn":37,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘init_FL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘*_10->list.block’ [CWE-690] \n101 |   freeList->head->list->block->addr = 0;\n|   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n‘main’: events 1-2\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  363 |   init_FL(freeList, numBlocks);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (2) calling ‘init_FL’ from ‘main’\n|\n+--> ‘init_FL’: events 3-5\n|\n|   94 | void init_FL(struct freeBlockList *freeList, unsigned int numBlocks) {\n|      |      ^~~~~~~\n|      |      |\n|      |      (3) entry to ‘init_FL’\n|......\n|  100 |   freeList->head->list->block = (struct block *)malloc(sizeof(struct block));\n|      |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                                                 |\n|      |                                                 (4) this call could return NULL\n|  101 |   freeList->head->list->block->addr = 0;\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                                     |\n|      |                                     (5) ‘*_10->list.block’ could be NULL: unchecked value from (4)\n|","priority":"warning"},{"filePath":"buddy.c","startLine":138,"endLine":138,"startColumn":16,"endColumn":16,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘gen_extract_FL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘el’ [CWE-690] \n138 |       el->next = NULL;\n|                ^\n‘main’: events 1-10\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (2) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |             ~~~~~~~~~~~~~~~~~~\n|      |             |\n|      |             (3) ...to here\n|  378 |     if (n != 1) {\n|      |        ~\n|      |        |\n|      |        (4) following ‘false’ branch (when ‘n == 1’)...\n|......\n|  383 |     switch (cmd) {\n|      |     ~~~~~~\n|      |     |\n|      |     (5) ...to here\n|      |     (6) following ‘case 109:’ branch...\n|......\n|  407 |     case 'm': {\n|      |     ~~~~\n|      |     |\n|      |     (7) ...to here\n|......\n|  410 |       if (n != 1 || num == 0) {\n|      |          ~\n|      |          |\n|      |          (8) following ‘false’ branch...\n|......\n|  415 |       if (allocate(freeList, usedList,\n|      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |           |\n|      |           (10) calling ‘allocate’ from ‘main’\n|  416 |                    (toP2(num, blockSize) + (blockSize / 2)) / blockSize, idx,\n|      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (9) ...to here\n|  417 |                    mem)) {\n|      |                    ~~~~\n|\n+--> ‘allocate’: events 11-12\n|\n|  288 | int allocate(struct freeBlockList *freeList, struct usedBlockList *usedList,\n|      |     ^~~~~~~~\n|      |     |\n|      |     (11) entry to ‘allocate’\n|  289 |              unsigned int size, unsigned int idx, char *mem) {\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (12) calling ‘extract_FL’ from ‘allocate’\n|\n+--> ‘extract_FL’: events 13-16\n|\n|  147 | struct block *extract_FL(struct freeBlockList *freeList, unsigned int size) {\n|      |               ^~~~~~~~~~\n|      |               |\n|      |               (13) entry to ‘extract_FL’\n|  148 |   if (freeList->head == NULL || freeList->head->list->block->size < size) {\n|      |      ~\n|      |      |\n|      |      (14) following ‘false’ branch...\n|......\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (15) ...to here\n|      |          (16) calling ‘gen_extract_FL’ from ‘extract_FL’\n|\n+--> ‘gen_extract_FL’: events 17-24\n|\n|  107 | struct block *gen_extract_FL(struct freeBlockListE **freeList,\n|      |               ^~~~~~~~~~~~~~\n|      |               |\n|      |               (17) entry to ‘gen_extract_FL’\n|......\n|  110 |   if (fl->list->block->size == size) {\n|      |      ~\n|      |      |\n|      |      (18) following ‘false’ branch...\n|......\n|  127 |   if (fl->next == NULL) {\n|      |      ~~~~~~~~~\n|      |      |  |\n|      |      |  (19) ...to here\n|      |      (20) following ‘true’ branch...\n|  128 |     if (fl->list->next == NULL) {\n|      |        ~~~~~~~~~\n|      |        |  |\n|      |        |  (21) ...to here\n|      |        (22) following ‘true’ branch...\n|  129 |       fl->list = splitBlock(fl->list);\n|      |                  ~~~~~~~~~~~~~~~~~~~~\n|      |                  |\n|      |                  (23) ...to here\n|  130 |       return gen_extract_FL(freeList, size);\n|      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |              |\n|      |              (24) calling ‘gen_extract_FL’ from ‘gen_extract_FL’\n|\n+--> ‘gen_extract_FL’: events 25-32\n|\n|  107 | struct block *gen_extract_FL(struct freeBlockListE **freeList,\n|      |               ^~~~~~~~~~~~~~\n|      |               |\n|      |               (25) entry to ‘gen_extract_FL’\n|......\n|  110 |   if (fl->list->block->size == size) {\n|      |      ~\n|      |      |\n|      |      (26) following ‘false’ branch...\n|......\n|  127 |   if (fl->next == NULL) {\n|      |      ~~~~~~~~~\n|      |      |  |\n|      |      |  (27) ...to here\n|      |      (28) following ‘true’ branch...\n|  128 |     if (fl->list->next == NULL) {\n|      |        ~~~~~~~~~\n|      |        |  |\n|      |        |  (29) ...to here\n|      |        (30) following ‘false’ branc","priority":"warning"},{"filePath":"buddy.c","startLine":199,"endLine":199,"startColumn":26,"endColumn":26,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘insert_FL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘*freeList.head’ [CWE-690] \n199 |     freeList->head->next = NULL;\n|                          ^\n‘main’: events 1-10\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (2) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |             ~~~~~~~~~~~~~~~~~~\n|      |             |\n|      |             (3) ...to here\n|  378 |     if (n != 1) {\n|      |        ~\n|      |        |\n|      |        (4) following ‘false’ branch (when ‘n == 1’)...\n|......\n|  383 |     switch (cmd) {\n|      |     ~~~~~~\n|      |     |\n|      |     (5) ...to here\n|      |     (6) following ‘case 109:’ branch...\n|......\n|  407 |     case 'm': {\n|      |     ~~~~\n|      |     |\n|      |     (7) ...to here\n|......\n|  410 |       if (n != 1 || num == 0) {\n|      |          ~\n|      |          |\n|      |          (8) following ‘false’ branch...\n|......\n|  415 |       if (allocate(freeList, usedList,\n|      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |           |\n|      |           (10) calling ‘allocate’ from ‘main’\n|  416 |                    (toP2(num, blockSize) + (blockSize / 2)) / blockSize, idx,\n|      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (9) ...to here\n|  417 |                    mem)) {\n|      |                    ~~~~\n|\n+--> ‘allocate’: events 11-12\n|\n|  288 | int allocate(struct freeBlockList *freeList, struct usedBlockList *usedList,\n|      |     ^~~~~~~~\n|      |     |\n|      |     (11) entry to ‘allocate’\n|  289 |              unsigned int size, unsigned int idx, char *mem) {\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (12) calling ‘extract_FL’ from ‘allocate’\n|\n+--> ‘extract_FL’: events 13-16\n|\n|  147 | struct block *extract_FL(struct freeBlockList *freeList, unsigned int size) {\n|      |               ^~~~~~~~~~\n|      |               |\n|      |               (13) entry to ‘extract_FL’\n|  148 |   if (freeList->head == NULL || freeList->head->list->block->size < size) {\n|      |      ~\n|      |      |\n|      |      (14) following ‘false’ branch...\n|......\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (15) ...to here\n|      |          (16) calling ‘gen_extract_FL’ from ‘extract_FL’\n|\n+--> ‘gen_extract_FL’: events 17-21\n|\n|  107 | struct block *gen_extract_FL(struct freeBlockListE **freeList,\n|      |               ^~~~~~~~~~~~~~\n|      |               |\n|      |               (17) entry to ‘gen_extract_FL’\n|......\n|  110 |   if (fl->list->block->size == size) {\n|      |      ~\n|      |      |\n|      |      (18) following ‘true’ branch...\n|  111 |     if (fl->list->next == NULL) {\n|      |        ~~~~~~~~~\n|      |        |  |\n|      |        |  (19) ...to here\n|      |        (20) following ‘true’ branch...\n|  112 |       struct block *ret = fl->list->block;\n|      |                           ~~~~~~~~\n|      |                             |\n|      |                             (21) ...to here\n|\n<------+\n|\n‘extract_FL’: event 22\n|\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (22) returning to ‘extract_FL’ from ‘gen_extract_FL’\n|\n<------+\n|\n‘allocate’: events 23-25\n|\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (23) returning to ‘allocate’ from ‘extract_FL’\n|  291 |\n|  292 |   if (b == NULL) {\n|      |      ~\n|      |      |\n|      |      (24) following ‘false’ branch (when ‘b’ is non-NULL)...\n|......\n|  295 |   setBlockTo(b, 'P', mem);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (25) ...to here\n|\n<------+\n|\n‘main’: events 26-37\n|\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (29) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |             ~~~~~~~~~~~~~~","priority":"warning"},{"filePath":"buddy.c","startLine":201,"endLine":201,"startColumn":32,"endColumn":32,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘insert_FL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘*freeList_13(D)->head.list’ [CWE-690] \n201 |     freeList->head->list->next = NULL;\n|                                ^\n‘main’: events 1-10\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (2) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |             ~~~~~~~~~~~~~~~~~~\n|      |             |\n|      |             (3) ...to here\n|  378 |     if (n != 1) {\n|      |        ~\n|      |        |\n|      |        (4) following ‘false’ branch (when ‘n == 1’)...\n|......\n|  383 |     switch (cmd) {\n|      |     ~~~~~~\n|      |     |\n|      |     (5) ...to here\n|      |     (6) following ‘case 109:’ branch...\n|......\n|  407 |     case 'm': {\n|      |     ~~~~\n|      |     |\n|      |     (7) ...to here\n|......\n|  410 |       if (n != 1 || num == 0) {\n|      |          ~\n|      |          |\n|      |          (8) following ‘false’ branch...\n|......\n|  415 |       if (allocate(freeList, usedList,\n|      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |           |\n|      |           (10) calling ‘allocate’ from ‘main’\n|  416 |                    (toP2(num, blockSize) + (blockSize / 2)) / blockSize, idx,\n|      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (9) ...to here\n|  417 |                    mem)) {\n|      |                    ~~~~\n|\n+--> ‘allocate’: events 11-12\n|\n|  288 | int allocate(struct freeBlockList *freeList, struct usedBlockList *usedList,\n|      |     ^~~~~~~~\n|      |     |\n|      |     (11) entry to ‘allocate’\n|  289 |              unsigned int size, unsigned int idx, char *mem) {\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (12) calling ‘extract_FL’ from ‘allocate’\n|\n+--> ‘extract_FL’: events 13-16\n|\n|  147 | struct block *extract_FL(struct freeBlockList *freeList, unsigned int size) {\n|      |               ^~~~~~~~~~\n|      |               |\n|      |               (13) entry to ‘extract_FL’\n|  148 |   if (freeList->head == NULL || freeList->head->list->block->size < size) {\n|      |      ~\n|      |      |\n|      |      (14) following ‘false’ branch...\n|......\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (15) ...to here\n|      |          (16) calling ‘gen_extract_FL’ from ‘extract_FL’\n|\n+--> ‘gen_extract_FL’: events 17-21\n|\n|  107 | struct block *gen_extract_FL(struct freeBlockListE **freeList,\n|      |               ^~~~~~~~~~~~~~\n|      |               |\n|      |               (17) entry to ‘gen_extract_FL’\n|......\n|  110 |   if (fl->list->block->size == size) {\n|      |      ~\n|      |      |\n|      |      (18) following ‘true’ branch...\n|  111 |     if (fl->list->next == NULL) {\n|      |        ~~~~~~~~~\n|      |        |  |\n|      |        |  (19) ...to here\n|      |        (20) following ‘true’ branch...\n|  112 |       struct block *ret = fl->list->block;\n|      |                           ~~~~~~~~\n|      |                             |\n|      |                             (21) ...to here\n|\n<------+\n|\n‘extract_FL’: event 22\n|\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (22) returning to ‘extract_FL’ from ‘gen_extract_FL’\n|\n<------+\n|\n‘allocate’: events 23-25\n|\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (23) returning to ‘allocate’ from ‘extract_FL’\n|  291 |\n|  292 |   if (b == NULL) {\n|      |      ~\n|      |      |\n|      |      (24) following ‘false’ branch (when ‘b’ is non-NULL)...\n|......\n|  295 |   setBlockTo(b, 'P', mem);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (25) ...to here\n|\n<------+\n|\n‘main’: events 26-37\n|\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (29) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |   ","priority":"warning"},{"filePath":"buddy.c","startLine":232,"endLine":232,"startColumn":63,"endColumn":63,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘init_UL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘usedList’ [CWE-690] \n232 | void init_UL(struct usedBlockList *usedList) { usedList->head = NULL; }\n|                                                               ^\n‘main’: events 1-3\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  366 |       (struct usedBlockList *)malloc(sizeof(struct usedBlockList));\n|      |                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                               |\n|      |                               (2) this call could return NULL\n|  367 |   init_UL(usedList);\n|      |   ~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (3) calling ‘init_UL’ from ‘main’\n|\n+--> ‘init_UL’: event 4\n|\n|  232 | void init_UL(struct usedBlockList *usedList) { usedList->head = NULL; }\n|      |      ^~~~~~~\n|      |      |\n|      |      (4) entry to ‘init_UL’\n|\n‘init_UL’: event 5\n|\n|  232 | void init_UL(struct usedBlockList *usedList) { usedList->head = NULL; }\n|      |                                                               ^\n|      |                                                               |\n|      |                                                               (5) ‘usedList’ could be NULL: unchecked value from (2)\n|","priority":"warning"},{"filePath":"buddy.c","startLine":271,"endLine":271,"startColumn":9,"endColumn":9,"rule":"[-Wanalyzer-possible-null-dereference]","category":"UndefinedBehavior","message":"buddy.c: In function ‘insert_UL’:[-Wanalyzer-possible-null-dereference]\nProblem: dereference of possibly-NULL ‘el’ [CWE-690] \n271 |   el->b = block;\n|   ~~~~~~^~~~~~~\n‘main’: events 1-10\n|\n|  325 | int main(int argc, char *argv[]) {\n|      |     ^~~~\n|      |     |\n|      |     (1) entry to ‘main’\n|......\n|  372 |   while (run) {\n|      |          ~~~\n|      |          |\n|      |          (2) following ‘true’ branch (when ‘run != 0’)...\n|......\n|  377 |     int n = scanf(\" %c\", &cmd);\n|      |             ~~~~~~~~~~~~~~~~~~\n|      |             |\n|      |             (3) ...to here\n|  378 |     if (n != 1) {\n|      |        ~\n|      |        |\n|      |        (4) following ‘false’ branch (when ‘n == 1’)...\n|......\n|  383 |     switch (cmd) {\n|      |     ~~~~~~\n|      |     |\n|      |     (5) ...to here\n|      |     (6) following ‘case 109:’ branch...\n|......\n|  407 |     case 'm': {\n|      |     ~~~~\n|      |     |\n|      |     (7) ...to here\n|......\n|  410 |       if (n != 1 || num == 0) {\n|      |          ~\n|      |          |\n|      |          (8) following ‘false’ branch...\n|......\n|  415 |       if (allocate(freeList, usedList,\n|      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |           |\n|      |           (10) calling ‘allocate’ from ‘main’\n|  416 |                    (toP2(num, blockSize) + (blockSize / 2)) / blockSize, idx,\n|      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (9) ...to here\n|  417 |                    mem)) {\n|      |                    ~~~~\n|\n+--> ‘allocate’: events 11-12\n|\n|  288 | int allocate(struct freeBlockList *freeList, struct usedBlockList *usedList,\n|      |     ^~~~~~~~\n|      |     |\n|      |     (11) entry to ‘allocate’\n|  289 |              unsigned int size, unsigned int idx, char *mem) {\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (12) calling ‘extract_FL’ from ‘allocate’\n|\n+--> ‘extract_FL’: events 13-16\n|\n|  147 | struct block *extract_FL(struct freeBlockList *freeList, unsigned int size) {\n|      |               ^~~~~~~~~~\n|      |               |\n|      |               (13) entry to ‘extract_FL’\n|  148 |   if (freeList->head == NULL || freeList->head->list->block->size < size) {\n|      |      ~\n|      |      |\n|      |      (14) following ‘false’ branch...\n|......\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (15) ...to here\n|      |          (16) calling ‘gen_extract_FL’ from ‘extract_FL’\n|\n+--> ‘gen_extract_FL’: events 17-21\n|\n|  107 | struct block *gen_extract_FL(struct freeBlockListE **freeList,\n|      |               ^~~~~~~~~~~~~~\n|      |               |\n|      |               (17) entry to ‘gen_extract_FL’\n|......\n|  110 |   if (fl->list->block->size == size) {\n|      |      ~\n|      |      |\n|      |      (18) following ‘true’ branch...\n|  111 |     if (fl->list->next == NULL) {\n|      |        ~~~~~~~~~\n|      |        |  |\n|      |        |  (19) ...to here\n|      |        (20) following ‘true’ branch...\n|  112 |       struct block *ret = fl->list->block;\n|      |                           ~~~~~~~~\n|      |                             |\n|      |                             (21) ...to here\n|\n<------+\n|\n‘extract_FL’: event 22\n|\n|  151 |   return gen_extract_FL(&(freeList->head), size);\n|      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |          |\n|      |          (22) returning to ‘extract_FL’ from ‘gen_extract_FL’\n|\n<------+\n|\n‘allocate’: events 23-26\n|\n|  290 |   struct block *b = extract_FL(freeList, size);\n|      |                     ^~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |                     |\n|      |                     (23) returning to ‘allocate’ from ‘extract_FL’\n|  291 |\n|  292 |   if (b == NULL) {\n|      |      ~\n|      |      |\n|      |      (24) following ‘false’ branch (when ‘b’ is non-NULL)...\n|......\n|  295 |   setBlockTo(b, 'P', mem);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (25) ...to here\n|  296 |\n|  297 |   insert_UL(usedList, b, idx);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (26) calling ‘insert_UL’ from ‘allocate’\n|\n+--> ‘insert_UL’: events 27-29\n|\n|  267 | void insert_UL(struct usedBlockList *usedList, struct block *block,\n|      |      ^~~~~~~~~\n|    ","priority":"warning"},{"filePath":"buddy.c","startLine":358,"endLine":358,"startColumn":3,"endColumn":3,"rule":"[-Wanalyzer-possible-null-argument]","category":"UndefinedBehavior","message":"buddy.c: In function ‘main’:[-Wanalyzer-possible-null-argument]\nProblem: use of possibly-NULL ‘mem’ where non-null expected [CWE-690] \n358 |   memset(mem, 'F', numBlocks);\n|   ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n‘main’: events 1-2\n|\n|  357 |   char *mem = malloc(numBlocks + 1);\n|      |               ^~~~~~~~~~~~~~~~~~~~~\n|      |               |\n|      |               (1) this call could return NULL\n|  358 |   memset(mem, 'F', numBlocks);\n|      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n|      |   |\n|      |   (2) argument 1 (‘mem’) from (1) could be NULL where non-null expected\n|\nIn file included from buddy.c:4:\n/usr/include/string.h:61:14: note: argument 1 of ‘memset’ must be non-null\n61 | extern void *memset (void *__s, int __c, size_t __n) __THROW __nonnull ((1));\n","priority":"warning"}]}
